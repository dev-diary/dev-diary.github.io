[
  
    {
      "category" : "java, oop, interview, best-practices",
      "title"    : "Object Oriented Design Principles Everythone Should Know",
      "description": "During my study I have collected quite a large and interesting list of object...",
      "content": "During my study I have collected quite a large and interesting list of object-oriented programming  design principles that may be useful to you.  This post is a shortened note, I invite you to explore knowledge reading books such as “Clean Architecture”, Martin Robert C.  Ready? I invite you to read the 10 most important OOP principles.OOP Design principlesObject-Oriented Design Principles represent a set of rules that are the essence of object-oriented programming and help us/others to prepare good, easy to understand design.General principlesSOLIDSolid is a set of 5 rules which tell us how to arrange our methods and data structures in classes. There are three main goals to understand and use SOLID: ✓ Code and functionality changes are easier ✓ Code is easy to understand ✓ Software structures ere the basis of components that can be used in many software systems There are a five of SOLID principles (Each letter - one principle):Single Responsibility PrincipleSingle Responsibility Principle tell us that each sofware entity (classes, modules, methods) is designed to assume only one responsibility. If a code change is to be made, we should need to make a changes in one class that processes it. Good example is the Employee class from a company application:public class Employee {    private String firstName;    private String lastName;    private BigDecimal salaryInUSD;    private BigDecimal salaryInEuro;    public Double getSalaryInPLN() {        return salaryInUSD * Exchange.getDollarToZlotyRate();    }    public Double getSalaryInEuro() {        return salaryInEuro * Exchange.getDollarToEuroRate();    }Why Employee class have to know something about currency exchange?  By putting these two methods into a single Employee class, the developers have coupled Employee class with class responsible for exchanges rates. How to do it to comply with the Single Responsibility Principle principle? We should remove getSalary.. methods from Employee class and create new class (e.g ExchangeService, SalaryCalculator, SalaryConverter…) which has knowledge of exchange rates. Next, we should provide salary to ExchangeService class. ExchangeService takes the salary, calculate salary in another currency and return it.Open/closed principleOpen/closed principle tell us that sofware entities should be open for extension, but closed for modification. Developer’s goal is to exted a class/module functionality without modyfying its source code. Let’s imagine creating a Square class. In accordance with the Single Responsibility Principle, you create a Square class and AreaCalculator which contains the method calculateArea().See the following example:public class Rectangle {    private double length;}public class AreaCalculator {        public double calculateArea(Square shape) {        return shape.getLength() * shape.getLength();    }}Unfortunately, after some time we get a new task - we have to add two new figures: a triangle and a trapeze. The only solution is to modify the calculateArea() method:public class AreaCalculator {    public double calculateArea(Square shape) {        if (shape instanceof Square) {            return shape.getLength() * shape.getLength();        } else if (shape instanceof Triangle) {            return (shape.getLength() * shape.getHeight()) / 2;        } else if (shape instanceof Trapeze) {            return (...);        } else {            return new RuntimeException(&quot;Cannot calculate area for provided shape&quot;);        }    }}This code starts to look like Arrow Anti-Pattern How to do it in accordance with O/C principle? You should use Shape interface:public interface Shape {    double getArea();}And implementation:public class Suqare implements Shape {    private double length;    @Override    public double getArea() {        return (length * length);    }}Thanks to it AreaCalculator does not have to know all kinds of shapes. It relying on Shape abstraction:public class AreaCalculator {    public double calculateArea(Square shape) {       return shape.getArea();    }}We’ve just made AreaCalculator closed for modification. If we get the task of creating a new shape - we will not have to modify this class. However, we can extend it.Liskov Substitution PrincipleLiskov Substitution Principle is a rule about the contract of the clases: if a base class satisfies a contract, then by the LSP derived classes must also satisfy that contract. The main objectives of this principle are: ✓ Classes in the application should be swapped by their subclasses without affecting the correctness of the program, i.e. the inheriting class must be a good equivalent of the base class. ✓A subclass should not do less than the base class. So it should always do more. Good example is the“Square extends Rectangle” class:public class Rectangle {    private int height;    private int width;    public void setHeight(int newHeight) {        this.height = newHeight;    }    public void setWidth(int newWidth) {        this.width = newWidth;    }    public int getWidth() {        return width;    }    public int getHeight() {        return height;    }}Mathematically, a square is a rectangle. Most people would misinterpret “is a” relation and model the relationship between the rectangle and a square with intheritance:public class Square extends Rectangle {    @Override    public void setHeight(int height) {        super.setHeight(height);    }    @Override    public void setWidth(int width) {        super.setWidth(width);    }}As you probably guess, you can not have two different dimensions for a square. It is possible to bypass this by:public class Square extends Rectangle {    @Override    public void setHeight(int height) {        super.setHeight(height);        super.setWidth(height);     }    @Override    public void setWidth(int width) {        super.setWidth(width);         super.setHeight(width);    }}We overrided setHeight and setWidth methods to set both dimensions to the same value.  What do you think of this fix?This design breaks LSP. A client can works with instances of Rectangle, but breaks when instances of Square  are passed to it:double countArea(Rectangle rec) {    rec.setWidth(10);    rec.setHeight(5);//It will be a fail for the square:    assertThat(rec.area() == 50);}How to do it correctly? The most critical aspect to inheritance is that we should model inheritance based on behaviours, not object properties. The easiest way to understand this is by way of example:interface Shape {    public double area();}public class Square implements Shape {    private double size;    public void setSize(double size) {        this.size = size;    }    @Override    public double area() {        return size * size;    }}public class Rectangle implements Shape {    private double height;    private double width;    public void setWidth(double width) {        this.width = width;    }    public void setHeight(double height) {        this.height = height;    }    @Override    public double area() {        return height * width;    }}Now clients of Shape cannot make any behavior changes via setter methods. When clients have to change properties of shapes, they have to do it in concrete classes.Interface Segregation PrincipleThe main assumption of the ISP:  No client should be forced to depend on methods it does not use.in other words:  Many client-specific interfaces are better than one general purpose interface.So interfaces that we create should not contain methods that we do not need. The class that implements the interface can not be forced to implement methods that it does not need, and this is often the case with large iterface.Let us understand the interface segregation principle by below example:public interface GenerateTimeSheet{  public void generateExcel();  public void generateCSV();}We have one interface with two methods to generate time sheet report (e.g for Employee). Consider a case client TimeSheet wants to use this interface but want to use only Excel time sheets. The interface forces client to implement an unnecessary method generateCSV();.A better solution would be breaking the GenerateTimeSheet interface into two small ones which contains separate methods.Dependency Inversion PrincipleThe general idea of this principle is as simple: High-level modules, which provide complex logic, should be easily reusable and unaffected by changes in low-level modules.Robert C. Martin’s definition of the Dependency Inversion Principle consists of two goals:  High-level modules should not depend on low-level modules. Both should depend on abstractions.  Abstractions should not depend on details. Details should depend on abstractions.In practice DIP tells that a method requires an interface object instead of specific class. This way we can pass many different versions of our entity into the same method.public class EventService {    private DBRepository repository = new DBRepository();    public void addEvent(Event event) {        repository.saveEvent(event);    }    public void removeEvent(String event) {        repository.deleteEvent(event);    }}EventService class uses concrete DBRepository class which save or delete events from database. In above example EventService is High-level module.  DBRepository is low-level module. We have a direct dependence between classes here. In this way, we violate the DIP policy. How to do it correctly? To solve the above problem, we should make the EventService class not dependent on the DBRepository class. In addition, both classes must depend on abstraction. Let’s create an abstraction - Repository interface. It will have methods for writing and reading tasks:  public interface Repository {      void saveEvent(Event Event);      void deleteEvent(Event event); } Let’s change the EventService class to use the Repository interface and thus depend on abstraction: public class EventService {    private Repository repository;    public EventService(Repository repository) {        this.repository = repository;    }    public void addEvent(Event event) {        repository.saveEvent(event);    }    public void removeEvent(String event) {        repository.deleteEvent(event);    }} Now we have to implement our DBRepository class (it will also depend on abstraction):public class DBRepository implements Repository {    @Override    public void saveEvent(Event event) {    }    @Override    public void deleteEvent(Event event) {    }} Relationships have been inverted. Now the “high level module” does not depend on the “low level module”. The lower layer module depends on the abstract interface from the upper layer (Repository interface). Changes in the module at the lower level do not affect the module at a higher level.If, for example, we need to save events in the file instead of in a database it is simple. It is enough to add the appropriate class at a lower level (FileRepository).",
      "url"      : "/blog/10-Object-oriented-design-principles-everythone-should-know/",
      "image"    : "/images/Object-Oriented-Design-Principles.jpg",
      "author"   : "Michal Fabjanski"
    }
    ,
  
    {
      "category" : "java, non-blocking",
      "title"    : "java.nio - How to build a simple non-blocking server in Java?",
      "description": "Building non-blocking server in JavaSome time ago (after Spring 5 releas with...",
      "content": "Building non-blocking server in JavaSome time ago (after Spring 5 releas with WebFlux) I started getting interested in non-blocking http servers (Java reactive frameworks are based on this). That’s why I decided to write a post in which I will show how to create a non-blocking server and a client. We will send messages from the client to the server and display them.Let’s start!What is non-blocking server?In the traditional approach, the server listens in the loop for any traffic on a given port. As soon as a new request appears, it delegates the request to previously created thread pool. This approach has some disadvantages. Firstly, the number of concurrently served clients have to be at most equal to the size of the thread pool. Moreover, if any client has weak internet connection - then the thread assigned to his request wastes most of the time waiting for more bits.In non-blocking approach - one thread can handle multiple queries at a time. How? Thanks to the non-blocking IO implemented in java.nio.package.java.nioJava New IO (nio) was created in JDK 1.4 to allow all  programmers to implement very fast input/output without having to deal with custom native code.It was built based on three main functionalities: buffers, channels and selectors.BuforBufor is a block of memory used to temporarily store data while it is being moved from one place to another.ChannelChannel represents a connection to an objects that are capable of performing I/O operations, such as files and sockets. It uses buffers from which it reads the data to send and writes received information.SelectorSelector is one of Java NIO class. The priciple of selector is very simple. After creation, we have to register in selector all the channels that we want to listen to. As a result of this operation, each channel is assigned with selectionKey. SelectionKey is an object that identyfying channel and contains information about channel’ status (e.g readiness to accept request). Each key holds information about who is making the request and what type of the request is.This is, each instance of Selector can monitor more socket channels and thus more connections. When something happens on the channel, the selector informs the application to process the request.Create NIO ServerLet’s code! We will create our non-blocking server and client. Server will accept connections on port 8089 on localhost. We set it by using ServerSocket’s bind() method. To make the server non-blocking we will set ServerSocketchannel’s configureBlocking() method to false. Take a look at the following implementation:public class NonBlockingServer {    private static Selector selector = null;    public static void main(String[] args) {        try {            selector = Selector.open();//            We have to set connection host, port and non-blocking mode            ServerSocketChannel socket = ServerSocketChannel.open();            ServerSocket serverSocket = socket.socket();            serverSocket.bind(new InetSocketAddress(&quot;localhost&quot;, 8089));            socket.configureBlocking(false);            int ops = socket.validOps();            socket.register(selector, ops, null);            while (true) {                selector.select();                Set&amp;lt;SelectionKey&amp;gt; selectedKeys = selector.selectedKeys();                Iterator&amp;lt;SelectionKey&amp;gt; i = selectedKeys.iterator();                while (i.hasNext()) {                    SelectionKey key = i.next();                    if (key.isAcceptable()) {//                        New client has been accepted                        handleAccept(socket, key);                    } else if (key.isReadable()) {//                        We can run non-blocking operation READ on our client                        handleRead(key);                    }                    i.remove();                }            }        } catch (IOException e) {            e.printStackTrace();        }    }    private static void handleAccept(ServerSocketChannel mySocket,                                     SelectionKey key) throws IOException {        System.out.println(&quot;Connection Accepted...&quot;);        // Accept the connection and set non-blocking mode        SocketChannel client = mySocket.accept();        client.configureBlocking(false);        // Register that client is reading this channel        client.register(selector, SelectionKey.OP_READ);    }    private static void handleRead(SelectionKey key)            throws IOException {        System.out.println(&quot;Reading...&quot;);        // create a ServerSocketChannel to read the request        SocketChannel client = (SocketChannel) key.channel();        // Create buffer to read data        ByteBuffer buffer = ByteBuffer.allocate(1024);        client.read(buffer);//        Parse data from buffer to String        String data = new String(buffer.array()).trim();        if (data.length() &amp;gt; 0) {            System.out.println(&quot;Received message: &quot; + data);            if (data.equalsIgnoreCase(&quot;exit&quot;)) {                client.close();                System.out.println(&quot;Connection closed...&quot;);            }        }    }} You certainly noticed two important methods in the main loop of our server:isAcceptable() - checking if client is requesting a connection and isReadable() - method to read data when client has prepared data. IsReadable()will read data from the channel and put it into buffer. Next, we will send data from buffer onto the screen.Create ClientOur client is simple. We also use SocketChannel to connect to the channel and send messages in the buffer. At the end we close SocketChannel.  public class ServerClient {        public static void main(String[] args) {          try {              String[] messages = {&quot;I like non-blocking servers&quot;, &quot;Hello non-blocking world!&quot;, &quot;One more message..&quot;, &quot;exit&quot;};              System.out.println(&quot;Starting client...&quot;);              SocketChannel client = SocketChannel.open(new InetSocketAddress(&quot;localhost&quot;, 8089));                for (String msg : messages) {                  System.out.println(&quot;Prepared message: &quot; + msg);                  ByteBuffer buffer = ByteBuffer.allocate(1024);                  buffer.put(msg.getBytes());                  buffer.flip();                  int bytesWritten = client.write(buffer);                  System.out.println(String.format(&quot;Sending Message: %s\nbufforBytes: %d&quot;, msg, bytesWritten));              }                client.close();              System.out.println(&quot;Client connection closed&quot;);            } catch (IOException e) {              e.printStackTrace();          }      }  }   Connecting client to our serverWe have a client and a server ready. Let’s run it! I wll start with the server (it must be ready when the client sends a message).  Below you can see the result of client&amp;lt;-&amp;gt;server communication.Client:    Starting client...    Prepared message: I like non-blocking servers    Sending Message: I like non-blocking servers    bufforBytes: 27    Prepared message: Hello non-blocking world!    Sending Message: Hello non-blocking world!    bufforBytes: 25    Prepared message: One more message..    Sending Message: One more message..    bufforBytes: 18    Prepared message: exit    Sending Message: exit    bufforBytes: 4    Client connection closed    Server:    Connection Accepted...    Reading...    Received message: I like non-blocking servers    Reading...    Received message: Hello non-blocking world!    Reading...    Received message: One more message..    Reading...    Received message: exit    Connection closed...     SummaryI hope you liked this post. The server and client code is available on github: REPO URL.See you next time!",
      "url"      : "/blog/java.nio-How-To-Build-a-non-blocking-server-in-java/",
      "image"    : "/images/java_nonblocking_server.jpg",
      "author"   : "Michal Fabjanski"
    }
    ,
  
    {
      "category" : "openhift, kubernetes",
      "title"    : "Remote JMX Connection to Openhift (or Kubernetes) pod",
      "description": "Remote Debugging Applications on Openshift podsIn this post I would like to s...",
      "content": "Remote Debugging Applications on Openshift podsIn this post I would like to share my last challenge at work - remote debugging of an application running on Openhift. This method is also valid for Kubernetes pods.Set up JMXThe first thing you have to do is to enable and configure JMX flags. Start your program with following parameters:-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=3000-Dcom.sun.management.jmxremote.rmi.port=3001-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=127.0.0.1JMX use RMI for the communication between the JMX client and the remote JVM. That’s why I’ve set two ports. JMX client will connect to hostname - 127.0.0.1:3001. You probably wonder how it can work if there is no RMI server running on localhost. This is because the next step is to set up Openshift/Kubernetes port forwarding.Port forwardingThanks to port forwarding feature you can forward one or more local ports to a pod.  You need to be locally logged on the Openhift. If you do not have it yet - I recommend downloading OpenShift Client Tools (Windows, Linux)Use following command to start the proxy and forward ports to the remote pod:oc login #login to Openshiftoc project #switch to your projectoc port-forward &amp;lt;POD-NAME&amp;gt; 8080 3000 3001Remember to replace  with the name of your pod. After that you shuld see output:oc port-forward my-app-46ztp 8080 3000 3001Forwarding from 127.0.0.1:8080 -&amp;gt; 8080Forwarding from 127.0.0.1:3000 -&amp;gt; 3000Forwarding from 127.0.0.1:3001 -&amp;gt; 3001JVisualVM connectionIf you have started proxy on the machine where you run JVisualVM, you can connect locally to RMI port: visualvm --openjmx localhost:3000",
      "url"      : "/blog/Remote-JMX-Connetion-to-Openhift-Pod/",
      "image"    : "/images/openshift-jmx.jpg",
      "author"   : "Michal Fabjanski"
    }
    
  
]
